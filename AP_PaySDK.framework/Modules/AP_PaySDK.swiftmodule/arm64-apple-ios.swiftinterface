// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 effective-4.1.50 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name AP_PaySDK
@_exported import AP_PaySDK
import AdSupport
import CommonCrypto
import CoreGraphics
import CoreLocation
import Darwin
import Dispatch
import Foundation
import LocalAuthentication
import MobileCoreServices
import ObjectiveC
import PassKit
import QuartzCore
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import WebKit
@objc public class TransQueryResults : ObjectiveC.NSObject {
  @objc public var detail: [AP_PaySDK.TransQueryResult]?
  @objc public var resultCode: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [AP_PaySDK.TransQueryResults]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc override dynamic public init()
  @objc deinit
}
@objc open class PayResult : ObjectiveC.NSObject {
  @objc public var amount: Swift.String!
  @objc public var successCode: Swift.String!
  @objc public var maskedCardNo: Swift.String?
  @objc public var authId: Swift.String!
  @objc public var cardHolder: Swift.String!
  @objc public var currencyCode: Swift.String!
  @objc public var errMsg: Swift.String!
  @objc public var ord: Swift.String!
  @objc public var payRef: Swift.String!
  @objc public var prc: Swift.String!
  @objc public var ref: Swift.String!
  @objc public var src: Swift.String!
  @objc public var transactionTime: Swift.String!
  @objc public var descriptionStr: Swift.String!
  @objc deinit
}
extension UITextField {
  @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
}
extension UIColor {
  @objc convenience dynamic public init?(hex: Swift.String)
}
@objc public enum Language : Swift.Int {
  case ENGLISH
  case CHINESE_TRADITIONAL
  case CHINESE_SIMPLIFIED
  case JAPANESE
  case THAI
  case FRENCH
  case GERMAN
  case RUSSIAN
  case SPANISH
  case VIETNAMESE
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum payMethod : Swift.Int {
  case ALL
  case CREDIT_CARD
  case VISA
  case MASTER_CARD
  case JAPAN_CARD
  case AMERICAN_CARD
  case DINERS
  case ALIPAYHKAPP
  case ALIPAYCNAPP
  case ALIPAYAPP
  case APPLEPAY
  case WECHATAPP
  case THREEDS2
  case CIMBCLICKS
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum payType : Swift.Int {
  case NORMAL_PAYMENT
  case HOLD_PAYMENT
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum Action : Swift.String {
  case TX_QUERY
  case PAYMENT_METHOD
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum PayGate : Swift.Int {
  case PAYDOLLAR
  case PESOPAY
  case SIAMPAY
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PayChannel : Swift.Int {
  case WEBVIEW
  case DIRECT
  case EASYPAYMENTFORM
  case NONE
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum EnvType : Swift.Int {
  case SANDBOX
  case PRODUCTION
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CurrencyCode : Swift.Int {
  case HKD
  case USD
  case SGD
  case RMB
  case CNY
  case YEN
  case JPY
  case TWD
  case AUD
  case EUR
  case GBP
  case CAD
  case MOP
  case PHP
  case THB
  case IDR
  case BND
  case MYR
  case BRL
  case INR
  case TRY
  case ZAR
  case VND
  case LKR
  case KWD
  case NZD
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ApplePayButtonType : Swift.Int {
  case Plain
  case Buy
  case SetUp
  case InStore
  case Donate
  case Checkout
  case Book
  case Subscribe
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ApplePayButtonStyle : Swift.Int {
  case White
  case WhiteOutline
  case Black
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class PaymentOptionsDetail : ObjectiveC.NSObject {
  @objc public var methods: AP_PaySDK.Methods!
  @objc deinit
}
@objc(CardDetails) open class CardDetails : ObjectiveC.NSObject {
  @objc public init(cardHolderName: Swift.String, cardNo: Swift.String, expMonth: Swift.String, expYear: Swift.String, securityCode: Swift.String)
  @objc deinit
}
infix operator <- : DefaultPrecedence
infix operator >>> : DefaultPrecedence
@available(iOS 10.0, *)
@objc(PaySDK) open class PaySDK : ObjectiveC.NSObject {
  @objc public static var shared: AP_PaySDK.PaySDK
  @objc public var delegate: AP_PaySDK.PaySDKDelegate?
  @objc public var paymentDetails: AP_PaySDK.PayData!
  @objc public var isBioMetricRequired: Swift.Bool
  @objc public var useSDKProgressScreen: Swift.Bool
  public func getSDKVersion() -> Swift.String
  @objc public func query(action: Swift.String)
  @objc public func process()
  @objc public func invalidateToken()
  @objc public func processOrder(url: Foundation.URL)
  @objc deinit
}
@objc public protocol PaySDKDelegate {
  @objc func paymentResult(result: AP_PaySDK.PayResult)
  @objc func transQueryResults(result: AP_PaySDK.TransQueryResults)
  @objc func payMethodOptions(method: AP_PaySDK.PaymentOptionsDetail)
  @objc optional func showProgress()
  @objc optional func hideProgress()
  @objc optional func setMerchantInfoImg() -> UIKit.UIImage?
  @objc optional func setMerchantInfoScreen() -> UIKit.UIViewController?
  @objc optional func setMerchantInfo() -> Swift.String?
}
extension UIButton {
  @objc dynamic public func setApplePayButton(btnType: AP_PaySDK.ApplePayButtonType, btnStyle: AP_PaySDK.ApplePayButtonStyle, inView: UIKit.UIView)
}
@objc public class Methods : ObjectiveC.NSObject {
  public var card: [AP_PaySDK.Card]!
  public var other: [AP_PaySDK.Card]!
  public var netbanking: [AP_PaySDK.Card]!
  public var saved: [AP_PaySDK.Card]!
  @objc deinit
}
@objc open class TransQueryResult : ObjectiveC.NSObject {
  public var cur: Swift.String?
  public var txTime: Swift.String?
  public var errMsg: Swift.String?
  public var orderStatus: Swift.String?
  public var amt: Swift.String?
  public var remark: Swift.String?
  public var eci: Swift.String?
  public var ipCountry: Swift.String?
  public var channelType: Swift.String?
  public var merchantId: Swift.String?
  public var authId: Swift.String?
  public var payerAuth: Swift.String?
  public var panLast4: Swift.String?
  public var ref: Swift.String?
  public var payMethod: Swift.String?
  public var successcode: Swift.String?
  public var cardIssuingCountry: Swift.String?
  public var prc: Swift.String?
  public var ord: Swift.String?
  public var panFirst4: Swift.String?
  public var alertCode: Swift.String?
  public var src: Swift.String?
  public var payRef: Swift.String?
  public var holder: Swift.String?
  public var sourceIp: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [AP_PaySDK.TransQueryResult]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc override dynamic public init()
  @objc deinit
}
@objc public class Card : ObjectiveC.NSObject {
  @objc deinit
}
@objc(PayData) open class PayData : ObjectiveC.NSObject {
  @objc public var cardDetails: AP_PaySDK.CardDetails?
  @objc public init(channelType: AP_PaySDK.PayChannel, envType: AP_PaySDK.EnvType, amount: Swift.String, payGate: AP_PaySDK.PayGate, currCode: AP_PaySDK.CurrencyCode, payType: AP_PaySDK.payType, orderRef: Swift.String, payMethod: Swift.String, lang: AP_PaySDK.Language, merchantId: Swift.String, remark: Swift.String, payRef: Swift.String, resultpage: Swift.String, extraData: [Swift.String : Any]?)
  @objc deinit
}
extension AP_PaySDK.Language : Swift.Equatable {}
extension AP_PaySDK.Language : Swift.Hashable {}
extension AP_PaySDK.Language : Swift.RawRepresentable {}
extension AP_PaySDK.payMethod : Swift.Equatable {}
extension AP_PaySDK.payMethod : Swift.Hashable {}
extension AP_PaySDK.payMethod : Swift.RawRepresentable {}
extension AP_PaySDK.payType : Swift.Equatable {}
extension AP_PaySDK.payType : Swift.Hashable {}
extension AP_PaySDK.payType : Swift.RawRepresentable {}
extension AP_PaySDK.Action : Swift.Equatable {}
extension AP_PaySDK.Action : Swift.Hashable {}
extension AP_PaySDK.Action : Swift.RawRepresentable {}
extension AP_PaySDK.PayGate : Swift.Equatable {}
extension AP_PaySDK.PayGate : Swift.Hashable {}
extension AP_PaySDK.PayGate : Swift.RawRepresentable {}
extension AP_PaySDK.PayChannel : Swift.Equatable {}
extension AP_PaySDK.PayChannel : Swift.Hashable {}
extension AP_PaySDK.PayChannel : Swift.RawRepresentable {}
extension AP_PaySDK.EnvType : Swift.Equatable {}
extension AP_PaySDK.EnvType : Swift.Hashable {}
extension AP_PaySDK.EnvType : Swift.RawRepresentable {}
extension AP_PaySDK.CurrencyCode : Swift.Equatable {}
extension AP_PaySDK.CurrencyCode : Swift.Hashable {}
extension AP_PaySDK.CurrencyCode : Swift.RawRepresentable {}
extension AP_PaySDK.ApplePayButtonType : Swift.Equatable {}
extension AP_PaySDK.ApplePayButtonType : Swift.Hashable {}
extension AP_PaySDK.ApplePayButtonType : Swift.RawRepresentable {}
extension AP_PaySDK.ApplePayButtonStyle : Swift.Equatable {}
extension AP_PaySDK.ApplePayButtonStyle : Swift.Hashable {}
extension AP_PaySDK.ApplePayButtonStyle : Swift.RawRepresentable {}
